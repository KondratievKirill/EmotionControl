import logging
import dat
from random import shuffle
from aiogram import Bot, Dispatcher, executor, types
with open('inform.txt') as t:
    token = t.read()

bot = Bot(token)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

hello = '''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.\n–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–∞—Ö —ç–º–æ—Ü–∏–π. –ë–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ –í—ã —Å–º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –º—É–∑—ã–∫—É –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —è —É–º–µ—é, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help.'''
instruction = '/startwork - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'

WORKMODE = ''
EMOTION = ''
DATATYPE = ''
CONTENT = []
COUNT = 0

@dp.message_handler(commands = ['start'])
async def new_people(message: types.Message):
    await message.answer(hello)

@dp.message_handler(commands = ['help'])
async def help(message: types.Message):
    await message.answer(instruction)

@dp.message_handler(commands=['startwork'])
async def choose_mode(message: types.Message()):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –º—É–∑—ã–∫–∏', callback_data='mode_search'))
    keyboard.add(types.InlineKeyboardButton(text='–í–Ω–µ—Å—Ç–∏ –≤–∫–ª–∞–¥ –≤ –ø—Ä–æ–µ–∫—Ç', callback_data='mode_append'))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('mode_'))
async def meeting(message: types.CallbackQuery):
    global WORKMODE
    WORKMODE = message.data.split('_')[-1]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text = '–†–∞–¥–æ—Å—Ç—å üòÑ', callback_data = 'emotion_—Ä–∞–¥–æ—Å—Ç—å'))
    keyboard.add(types.InlineKeyboardButton(text='–ì—Ä—É—Å—Ç—å üò¢', callback_data = 'emotion_–≥—Ä—É—Å—Ç—å'))
    keyboard.add(types.InlineKeyboardButton(text='–ì–Ω–µ–≤ üò°', callback_data = 'emotion_–≥–Ω–µ–≤'))
    keyboard.add(types.InlineKeyboardButton(text='–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ üòå', callback_data = 'emotion_—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ'))
    keyboard.add(types.InlineKeyboardButton(text='–ú–æ—Ç–∏–≤–∞—Ü–∏—è üò§', callback_data = 'emotion_–º–æ—Ç–∏–≤–∞—Ü–∏—è'))
    await message.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ—Ü–∏—é: ', reply_markup=keyboard)
    await message.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('emotion_'))
async def cancel(message: types.CallbackQuery):
    global EMOTION
    EMOTION = message.data.split('_')[-1]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ö–∞—Ä—Ç–∏–Ω–∫–∞', callback_data='data_–∫–∞—Ä—Ç–∏–Ω–∫–∞'))
    keyboard.add(types.InlineKeyboardButton(text='–ú—É–∑—ã–∫–∞', callback_data='data_–º—É–∑—ã–∫–∞'))
    if WORKMODE == 'search':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å: '
    elif WORKMODE == 'append':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–∞–≤–∏—Ç—å: '
    await message.message.answer(text, reply_markup=keyboard)
    await message.answer()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('data_'))
async def forma(message: types.CallbackQuery):
    global DATATYPE, WORKMODE, EMOTION, CONTENT, COUNT
    DATATYPE = message.data.split('_')[-1]
    print(WORKMODE, DATATYPE)
    if WORKMODE == 'append':
        if DATATYPE == '–∫–∞—Ä—Ç–∏–Ω–∫–∞':
            print('Work Block')
            await message.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –≤–≤–µ–¥–∏—Ç–µ "."):')
        elif DATATYPE == '–º—É–∑—ã–∫–∞':
            print('Work Block')
            await message.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º—É–∑—ã–∫—É (–µ—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –≤–≤–µ–¥–∏—Ç–µ "."):')
    elif WORKMODE == 'search':
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='search_next'))
        keyboard.add(types.InlineKeyboardButton(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data='search_end'))
        CONTENT = list(set(dat.get_data(DATATYPE, EMOTION)))
        print(len(CONTENT))
        if len(CONTENT) == 0:
            await message.message.answer('–£–ø—Å. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –Ω–µ—Ç –Ω–∏—á–µ–≥–æ –∏–∑ —ç—Ç–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
        else:
            shuffle(CONTENT)

            if DATATYPE == '–∫–∞—Ä—Ç–∏–Ω–∫–∞':
                await message.message.answer_photo(CONTENT[COUNT % len(CONTENT)], reply_markup=keyboard)
            elif DATATYPE == '–º—É–∑—ã–∫–∞':
                await message.message.answer(CONTENT[COUNT % len(CONTENT)], reply_markup=keyboard)
    await message.answer()


@dp.callback_query_handler(text=['search_next'])
async def nextStep(message: types.CallbackQuery):
    global CONTENT, COUNT, DATATYPE
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='search_next'))
    keyboard.add(types.InlineKeyboardButton(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data='search_end'))
    if DATATYPE == '–∫–∞—Ä—Ç–∏–Ω–∫–∞':
        COUNT += 1
        await message.message.answer_photo(CONTENT[COUNT % len(CONTENT)], reply_markup=keyboard)    
    elif DATATYPE == '–º—É–∑—ã–∫–∞':
        COUNT += 1
        await message.message.answer(CONTENT[COUNT % len(CONTENT)], reply_markup=keyboard)
    await message.answer()  


@dp.callback_query_handler(text=['search_end'])
async def SearchEnd(message: types.CallbackQuery):
    global WORKMODE, EMOTION, DATATYPE, CONTENT, COUNT
    WORKMODE = ''
    EMOTION = ''
    DATATYPE = ''
    CONTENT = []
    COUNT = 0
    await message.answer()



@dp.message_handler(content_types=['photo', 'text'])
async def forma(message: types.Message):
    global DATATYPE, WORKMODE, EMOTION
    if WORKMODE == 'append':
        if message.text != '.':
            if DATATYPE == '–∫–∞—Ä—Ç–∏–Ω–∫–∞':
                file_info = await bot.get_file(message.photo[-1].file_id)
                dowloaded_file = await bot.download_file(file_info.file_path)
            
                try:
                    dat.add_data(dowloaded_file.read(), EMOTION, DATATYPE)
                except:
                    await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
                else:
                    await message.answer('–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!')
            elif DATATYPE == '–º—É–∑—ã–∫–∞':
                if message.text[0:4] == 'http':
                    try:
                        dat.add_data(message.text, EMOTION, DATATYPE)
                    except:
                        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
                    else:
                        await message.answer('–°—Å—ã–ª–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!')
                else:
                    await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        DATATYPE = ''
        WORKMODE = ''
        EMOTION = ''



if __name__ == "__main__":
	executor.start_polling(dp, skip_updates=True)